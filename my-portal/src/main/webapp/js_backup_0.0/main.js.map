{"version":3,"sources":["webpack:///./src/$_lazy_route_resource lazy namespace object","webpack:///./src/app/admin/admin.component.css","webpack:///./src/app/admin/admin.component.html","webpack:///./src/app/admin/admin.component.ts","webpack:///./src/app/app.component.css","webpack:///./src/app/app.component.html","webpack:///./src/app/app.component.ts","webpack:///./src/app/app.module.ts","webpack:///./src/app/dash-routing.module.ts","webpack:///./src/app/dashboard/dashboard.component.css","webpack:///./src/app/dashboard/dashboard.component.html","webpack:///./src/app/dashboard/dashboard.component.ts","webpack:///./src/app/models/patient.ts","webpack:///./src/app/models/response.ts","webpack:///./src/app/services/dummyresponse.ts","webpack:///./src/app/services/httpcomm.service.ts","webpack:///./src/app/services/patient.service.ts","webpack:///./src/app/snackhelper/snackhelper.component.css","webpack:///./src/app/snackhelper/snackhelper.component.html","webpack:///./src/app/snackhelper/snackhelper.component.ts","webpack:///./src/environments/environment.ts","webpack:///./src/main.ts"],"names":[],"mappings":"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","file":"main.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./src/$$_lazy_route_resource lazy recursive\";","module.exports = \"\"","module.exports = \"<p>\\n  admin works!\\n</p>\\n\"","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-admin',\n  templateUrl: './admin.component.html',\n  styleUrls: ['./admin.component.css']\n})\nexport class AdminComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n","module.exports = \".example-container {\\r\\n    position: absolute;\\r\\n    top: 0;\\r\\n    bottom: 0;\\r\\n    left: 0;\\r\\n    right: 0;\\r\\n  }\"","module.exports = \"<mat-sidenav-container\\n    class=\\\"example-container\\\" (backdropClick)=\\\"close('backdrop')\\\">\\n  <mat-sidenav #sidenav (keydown.escape)=\\\"sidenav.close()\\\" disableClose>\\n    <!-- <p><button mat-button (click)=\\\"close('toggle button')\\\">Toggle</button></p> -->\\n    <p *ngFor = \\\"let menu of navMenus\\\">\\n      <button mat-button routerLink={{menu.path}} (click) = \\\"sidenav.close()\\\">{{menu.name}}</button>   \\n    </p>\\n  </mat-sidenav>\\n\\n  <mat-sidenav-content>\\n    <p>\\n      <button mat-icon-button (click)=\\\"sidenav.open()\\\">\\n          <mat-icon aria-label=\\\"Example icon-button with a heart icon\\\">home</mat-icon>\\n      </button>\\n    </p>\\n    <router-outlet></router-outlet>\\n  </mat-sidenav-content>\\n</mat-sidenav-container>\\n\\n<!-- <nav>\\n  <a routerLink=\\\"/dashboard\\\">Dashboard</a>\\n  <a routerLink=\\\"/admin\\\">Admin</a>\\n</nav> -->\\n\\n\"","import { Component,ViewChild } from '@angular/core';\nimport {MatSidenav} from '@angular/material/sidenav';\nimport { DashRoutingModule } from './dash-routing.module'\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent {\n  \n  @ViewChild('sidenav') sidenav: MatSidenav;\n  title :string = 'eps-dashboard';\n  reason :string = '';\n  navMenus = [\n    {\"name\": \"Dashboard\", \"path\":\"dashboard\"},\n    {\"name\": \"Admin\", \"path\":\"admin\"}    \n  ]\n  constructor(){\n  }\n\n  close(reason: string) {\n    this.reason = reason;\n    this.sidenav.close();\n  }\n}\n","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\n\nimport { AppComponent } from './app.component';\nimport {BrowserAnimationsModule} from '@angular/platform-browser/animations';\nimport {CdkTableModule} from '@angular/cdk/table';\nimport {CdkTreeModule} from '@angular/cdk/tree';\nimport {HttpClientModule} from '@angular/common/http';\nimport {FormsModule, ReactiveFormsModule} from '@angular/forms';\nimport {\n  MatAutocompleteModule,\n  MatBadgeModule,\n  MatBottomSheetModule,\n  MatButtonModule,\n  MatButtonToggleModule,\n  MatCardModule,\n  MatCheckboxModule,\n  MatChipsModule,\n  MatDatepickerModule,\n  MatDialogModule,\n  MatDividerModule,\n  MatExpansionModule,\n  MatGridListModule,\n  MatIconModule,\n  MatInputModule,\n  MatListModule,\n  MatMenuModule,\n  MatNativeDateModule,\n  MatPaginatorModule,\n  MatProgressBarModule,\n  MatProgressSpinnerModule,\n  MatRadioModule,\n  MatRippleModule,\n  MatSelectModule,\n  MatSidenavModule,\n  MatSliderModule,\n  MatSlideToggleModule,\n  MatSnackBarModule,\n  MatSortModule,\n  MatStepperModule,\n  MatTableModule,\n  MatTabsModule,\n  MatToolbarModule,\n  MatTooltipModule,\n  MatTreeModule,\n} from '@angular/material';\nimport {platformBrowserDynamic} from '@angular/platform-browser-dynamic';\n\nimport { DashRoutingModule } from './/dash-routing.module';\nimport { DashboardComponent } from './dashboard/dashboard.component';\nimport { AdminComponent } from './admin/admin.component';\nimport { SnackhelperComponent } from './snackhelper/snackhelper.component';\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    DashboardComponent,\n    AdminComponent,\n    SnackhelperComponent,\n  ],\n  imports: [\n    BrowserModule,\n    BrowserAnimationsModule,\n    CdkTableModule,\n    CdkTreeModule,\n    MatAutocompleteModule,\n    MatBadgeModule,\n    MatBottomSheetModule,\n    MatButtonModule,\n    MatButtonToggleModule,\n    MatCardModule,\n    MatCheckboxModule,\n    MatChipsModule,\n    MatStepperModule,\n    MatDatepickerModule,\n    MatDialogModule,\n    MatDividerModule,\n    MatExpansionModule,\n    MatGridListModule,\n    MatIconModule,\n    MatInputModule,\n    MatListModule,\n    MatMenuModule,\n    MatNativeDateModule,\n    MatPaginatorModule,\n    MatProgressBarModule,\n    MatProgressSpinnerModule,\n    MatRadioModule,\n    MatRippleModule,\n    MatSelectModule,\n    MatSidenavModule,\n    MatSliderModule,\n    MatSlideToggleModule,\n    MatSnackBarModule,\n    MatSortModule,\n    MatTableModule,\n    MatTabsModule,\n    MatToolbarModule,\n    MatTooltipModule,\n    MatTreeModule,\n    FormsModule, \n    ReactiveFormsModule,\n    HttpClientModule,\n    DashRoutingModule\n  ],\n  providers: [],\n  bootstrap: [AppComponent],\n  entryComponents: [SnackhelperComponent]\n})\nexport class AppModule { }\n","import { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\n\nimport {DashboardComponent} from './dashboard/dashboard.component';\nimport {AdminComponent} from './admin/admin.component';\n\nconst routes: Routes = [\n  { path: '', redirectTo: '/dashboard', pathMatch: 'full' },\n  { path: 'dashboard', component: DashboardComponent },\n  { path: 'admin', component: AdminComponent },\n  // { path: 'heroes', component: HeroesComponent },\n  // { path: 'app-material-nav', component: MaterialNavComponent},\n  // { path: 'app-material-dashboard', component: MaterialDashboardComponent},\n  // { path: 'app-material-table', component: MaterialTableComponent},\n  // { path: 'angular-material-component', component: AngularComponentsComponent}\n];\n\n@NgModule({\n  imports: [\n    RouterModule.forRoot(routes)\n  ],\n  declarations: [],\n  exports: [\n    RouterModule\n  ]\n})\nexport class DashRoutingModule {\n}\n","module.exports = \".example-container {\\r\\n    display: flex;\\r\\n    flex-direction: column;\\r\\n  }\\r\\n  \\r\\n  .example-container > * {\\r\\n    width: 100%;\\r\\n  }\\r\\n  \\r\\n  .example-card {\\r\\n    max-width: 800px;\\r\\n    min-width: 50px;\\r\\n    margin-left: 50px;\\r\\n    margin-top: 30px;\\r\\n    width : 100%;\\r\\n  }\\r\\n  \\r\\n  .expansion-margin {\\r\\n    max-width: 1000px;\\r\\n    margin-left: 150px;\\r\\n    margin-top: 30px;\\r\\n  }\\r\\n  \\r\\n  .example-section {\\r\\n    display: flex;\\r\\n    align-content: center;\\r\\n    align-items: center;\\r\\n    height: 60px;\\r\\n  }\\r\\n  \\r\\n  .example-margin {\\r\\n    /* margin: 0 10px; */\\r\\n    margin-top: 20px;\\r\\n    margin : 5px 10px;\\r\\n  }\\r\\n  \\r\\n  .mat-radio-button ~ .mat-radio-button {\\r\\n    padding: 36px;\\r\\n  }\"","module.exports = \"<div class=\\\"dash\\\">\\n  <mat-tab-group>\\n    <mat-tab label=\\\"Patient\\\">\\n\\n      <div class=\\\"expansion-margin\\\">\\n\\n        <!-- Accordian expansion panel -->\\n        <mat-accordion>\\n          <mat-expansion-panel [expanded]=\\\"step === 0\\\" (opened)=\\\"setStep(0)\\\" hideToggle>\\n            <mat-expansion-panel-header>\\n              <mat-panel-title>\\n                Basic data\\n              </mat-panel-title>\\n              <mat-panel-description>\\n                Section for name, date of birth, weight, blood group\\n              </mat-panel-description>\\n            </mat-expansion-panel-header>\\n\\n            <mat-card class=\\\"example-card\\\">\\n              <mat-card-content>\\n                <table>\\n                  <tr>\\n                    <td>\\n                      <!-- First Name -->\\n                      <div class=\\\"example-container example-margin\\\">\\n                        <mat-form-field hintLabel=\\\"Max {{config.first_name_len}} characters\\\">\\n                          <input matInput maxlength=20 placeholder=\\\"First name\\\" \\n                            [(ngModel)]=\\\"patient.firstName\\\" (keyup)='onKeyUp($event)'\\n                            required>\\n                          <mat-hint align=\\\"end\\\">{{patient.firstName?.length || 0}}/{{config.first_name_len}}</mat-hint>\\n                        </mat-form-field>\\n                      </div>\\n                    </td>\\n                    <td>\\n                      <!-- Last Name -->\\n                      <div class=\\\"example-container example-margin\\\">\\n                        <mat-form-field hintLabel=\\\"Max {{config.last_name_len}} characters\\\">\\n                          <input matInput maxlength=15 placeholder=\\\"Last name\\\" \\n                            [(ngModel)]=\\\"patient.lastName\\\" required>\\n                          <mat-hint align=\\\"end\\\">{{patient.lastName?.length || 0}}/{{config.last_name_len}}</mat-hint>\\n                        </mat-form-field>\\n                      </div>\\n                    </td>\\n                  </tr>\\n                  <tr>\\n                    <td>\\n                      <span>\\n                        Date of birth :\\n                      </span>\\n                    </td>\\n                    <td>\\n                      <!-- DOB -->\\n                      <div class=\\\"example-margin\\\">\\n                        <mat-form-field>\\n                          <input matInput [matDatepicker]=\\\"picker\\\" placeholder=\\\"Select from calender\\\" (dateInput)=\\\"addEvent('input', $event)\\\"\\n                            (dateChange)=\\\"addEvent('change', $event)\\\" disabled>\\n                          <mat-datepicker-toggle matSuffix [for]=\\\"picker\\\"></mat-datepicker-toggle>\\n                          <mat-datepicker #picker disabled=\\\"false\\\"></mat-datepicker>\\n                        </mat-form-field>\\n                      </div>\\n                    </td>\\n                  </tr>\\n                  <tr>\\n                    <td>\\n                      <span>Blood Group : </span>\\n                    </td>\\n                    <td>\\n                      <div class=\\\"example-margin\\\">\\n                        <!-- Blood group -->\\n                        <mat-select placeholder=\\\"Blood group\\\" [(ngModel)]=\\\"patient.bloodGroup\\\" name=\\\"bloodGroup\\\">\\n                          <mat-option *ngFor=\\\"let bg of bloodGroups\\\" [value]=\\\"bg.value\\\">\\n                            {{bg.viewValue}}\\n                          </mat-option>\\n                        </mat-select>\\n                      </div>\\n                    </td>\\n                  </tr>\\n                  <tr>\\n                    <td>\\n                      Weight :\\n                    </td>\\n                    <td>\\n                      <!-- Weight -->\\n                      <div class=\\\"example-margin\\\">\\n                        <mat-form-field hintLabel=\\\"Enter in digits\\\">\\n                          <input matInput maxlength=3 placeholder=\\\"Weight\\\" \\n                            [(ngModel)]=\\\"patient.weight\\\" required>\\n                          <mat-hint align=\\\"end\\\">{{patient.weight?.length || 0}}/3</mat-hint>\\n                        </mat-form-field>\\n                      </div>\\n                    </td>\\n                  </tr>\\n                </table>\\n              </mat-card-content>\\n            </mat-card>\\n            <mat-action-row>\\n              <button mat-button color=\\\"primary\\\" (click)=\\\"nextStep()\\\">Next</button>\\n            </mat-action-row>\\n          </mat-expansion-panel>\\n\\n          <mat-expansion-panel [expanded]=\\\"step === 1\\\" (opened)=\\\"setStep(1)\\\" hideToggle>\\n            <mat-expansion-panel-header>\\n              <mat-panel-title>\\n                Contact data\\n              </mat-panel-title>\\n              <mat-panel-description>\\n                Section for phone number, email and address\\n              </mat-panel-description>\\n            </mat-expansion-panel-header>\\n            <mat-card class=\\\"example-card\\\">\\n              <mat-card-content>\\n                <table>\\n                  <tr>\\n                    <td>\\n                      <!-- Contact Number -->\\n                      <div class=\\\"example-container example-margin\\\">\\n                        <mat-form-field hintLabel=\\\"Enter in digits\\\" class=\\\"example-full-width\\\">\\n                          <span matPrefix>+91 &nbsp;</span>\\n                          <input type=\\\"tel\\\" matInput placeholder=\\\"Contact number\\\"\\n                            [(ngModel)]=\\\"patient.contactNo1\\\">\\n                          <mat-icon matSuffix>contact_phone</mat-icon>\\n                        </mat-form-field>\\n                      </div>\\n                    </td>\\n                    <td>\\n                      <!-- Email address -->\\n                      <div class=\\\"example-container example-margin\\\">\\n                        <mat-form-field hintLabel=\\\"Optional email\\\">\\n                          <input matInput maxlength=30 placeholder=\\\"Enter email\\\" \\n                            type=\\\"email\\\" [(ngModel)]=\\\"patient.email\\\">\\n                          <mat-icon matSuffix>contact_mail</mat-icon>\\n                          <mat-hint align=\\\"end\\\">{{patient.email?.length || 0}}/30</mat-hint>\\n                        </mat-form-field>\\n                      </div>\\n                    </td>\\n                  </tr>\\n                </table>\\n\\n                <!-- Address 1 -->\\n                <div class=\\\"example-container example-margin\\\">\\n                  <mat-form-field class=\\\"example-full-width\\\">\\n                    <textarea matInput placeholder=\\\"Address1\\\" \\n                      [(ngModel)]=\\\"patient.address1\\\" required></textarea>\\n                    <button mat-button *ngIf=\\\"patient.address1\\\" matSuffix mat-icon-button aria-label=\\\"Clear\\\" (click)=\\\"patient.address1=''\\\">\\n                      <mat-icon>close</mat-icon>\\n                    </button>\\n                  </mat-form-field>\\n                </div>\\n\\n                <!-- Address 2 -->\\n                <div class=\\\"example-container example-margin\\\">\\n                  <mat-form-field class=\\\"example-full-width\\\">\\n                    <textarea matInput placeholder=\\\"Address2\\\" \\n                      [(ngModel)]=\\\"patient.address2\\\" ></textarea>\\n                    <button mat-button *ngIf=\\\"patient.address2\\\" matSuffix mat-icon-button aria-label=\\\"Clear\\\" (click)=\\\"patient.address2=''\\\">\\n                      <mat-icon>close</mat-icon>\\n                    </button>\\n                  </mat-form-field>\\n                </div>\\n              </mat-card-content>\\n            </mat-card>\\n            <mat-action-row>\\n              <button mat-button color=\\\"warn\\\" (click)=\\\"prevStep()\\\">Previous</button>\\n              <button mat-button color=\\\"primary\\\" (click)=\\\"nextStep()\\\">Next</button>\\n            </mat-action-row>\\n          </mat-expansion-panel>\\n\\n          <mat-expansion-panel [expanded]=\\\"step === 2\\\" (opened)=\\\"setStep(2)\\\" hideToggle>\\n            <mat-expansion-panel-header>\\n              <mat-panel-title>\\n                Configuration data\\n              </mat-panel-title>\\n              <mat-panel-description>\\n                Optional data\\n              </mat-panel-description>\\n            </mat-expansion-panel-header>\\n            <span>Discount</span>\\n            <table>\\n              <tr>\\n                <td>\\n                  <mat-radio-group class=\\\"example-margin\\\" [(ngModel)]=\\\"patient.discountType\\\">\\n                    <mat-radio-button value=\\\"percentage\\\">Percent</mat-radio-button>\\n                    <mat-radio-button value=\\\"flat\\\">Flat</mat-radio-button>\\n                  </mat-radio-group>\\n                </td>\\n                <td>\\n                  <div class=\\\"example-margin\\\">\\n                    <mat-form-field hintLabel=\\\"Enter in digits\\\">\\n                      <input matInput maxlength=\\\"5\\\" placeholder=\\\"Discount\\\" \\n                        [(ngModel)]=\\\"patient.discount\\\">\\n                      <mat-hint align=\\\"end\\\">{{patient.discount?.length || 0}}/5</mat-hint>\\n                    </mat-form-field>\\n                  </div>\\n                </td>\\n              </tr>\\n            </table>\\n            <mat-action-row>\\n              <button mat-button color=\\\"warn\\\" (click)=\\\"prevStep()\\\">Previous</button>\\n              <button mat-button color=\\\"primary\\\" (click)=\\\"submitPatient()\\\">Add Patient</button>\\n            </mat-action-row>\\n          </mat-expansion-panel>\\n\\n\\n        </mat-accordion>\\n\\n      </div>\\n    </mat-tab>\\n    <mat-tab label=\\\"Prescription\\\">\\n      <div class=\\\"example-margin\\\">\\n        <form class=\\\"example-form\\\">\\n          <mat-form-field class=\\\"example-full-width\\\">\\n            <input type=\\\"text\\\" matInput placeholder=\\\"Pick one\\\" aria-label=\\\"Number\\\" [formControl]=\\\"myControl\\\" [matAutocomplete]=\\\"auto\\\">\\n            <mat-autocomplete autoActiveFirstOption #auto=\\\"matAutocomplete\\\">\\n              <mat-option *ngFor=\\\"let option of filteredOptions | async\\\" [value]=\\\"option\\\">\\n                {{option}}\\n              </mat-option>\\n            </mat-autocomplete>\\n          </mat-form-field>\\n        </form>\\n        <form class=\\\"example-form\\\">\\n          <mat-form-field class=\\\"example-full-width\\\">\\n            <input type=\\\"text\\\" matInput placeholder=\\\"Pick one2\\\" aria-label=\\\"Number\\\" [formControl]=\\\"myControl2\\\" [matAutocomplete]=\\\"auto2\\\">\\n            <mat-autocomplete autoActiveFirstOption #auto2=\\\"matAutocomplete\\\">\\n              <mat-option *ngFor=\\\"let option2 of filteredOptions2 | async\\\" [value]=\\\"option2\\\">\\n                {{option2}}\\n              </mat-option>\\n            </mat-autocomplete>\\n          </mat-form-field>\\n        </form>\\n      </div>\\n    </mat-tab>\\n  </mat-tab-group>\\n</div>\"","import { Component, OnInit } from '@angular/core';\nimport { PatientService } from '../services/patient.service';\nimport { Patient, BloodGroup } from '../models/patient';\nimport { MatSnackBar } from '@angular/material';\nimport { SnackhelperComponent } from '../snackhelper/snackhelper.component';\nimport {MatDatepickerInputEvent} from '@angular/material/datepicker';\nimport {FormControl, Validators} from '@angular/forms';\n\nimport {Observable} from 'rxjs';\nimport {map, startWith} from 'rxjs/operators';\n\n@Component({\n  selector: 'app-dashboard',\n  templateUrl: './dashboard.component.html',\n  styleUrls: ['./dashboard.component.css']\n})\nexport class DashboardComponent implements OnInit {\n\n  patient : Patient;\n  config = {\n    \"first_name_len\" : 20,\n    \"last_name_len\" : 15\n  };\n  firstName : string;\n  lastName : string;\n  bloodGroups : BloodGroup[] = [\n    {value : 'A_POSITIVE', viewValue : 'A+'},\n    {value : 'A_NEGETIVE', viewValue : 'A-'},\n    {value : 'B_POSITIVE', viewValue : 'B+'},\n    {value : 'B_NEGETIVE', viewValue : 'B-'},\n    {value : 'AB_POSITIVE', viewValue : 'AB+'},\n    {value : 'AB_NEGETIVE', viewValue : 'AB-'},\n    {value : 'O_POSITIVE', viewValue : 'O+'},\n    {value : 'O_NEGETIVE', viewValue : 'O-'},\n  ];\n\n  patientEmailControl = new FormControl('',[\n    Validators.email,\n    Validators.required\n  ]);\n\n  //Accordian expansion bar control\n  step: number = 0;\n  setStep(index: number) {\n    this.step = index;\n  }\n\n  nextStep() {\n    this.step++;\n  }\n\n  prevStep() {\n    this.step--;\n  }\n  constructor(public patientService : PatientService, public snackBar: MatSnackBar) { \n    this.patient = new Patient();\n    // this.snackBar.openFromComponent(SnackbarComponent,{\n    //   duration : 2000,\n    // })\n  }\n\n  ngOnInit() {          \n    this.getRealPatient();\n    this.startFilter1();\n    this.startFilter2();\n  }\n\n  getRealPatient(){\n    this.patient.firstName = 'Sourabh';\n    this.patientService.getRealPatient(this.patient).subscribe(\n      s => {\n        if(s.length > 0){\n          this.patient = s[0];\n          this.firstName = this.patient.firstName;\n          this.lastName = this.patient.lastName;\n        }else{\n          \n        }\n      }\n    )\n  }\n  submitPatient(){\n    this.nextStep();\n    console.log('Sending from dash');\n    console.log(this.patient);\n    this.patientService.addPatient(this.patient).subscribe(\n      s => {\n        console.log('Receieved response');\n        console.log('s');\n      }\n    )\n  }\n  onKeyUp(event : any){\n    console.log(event);\n    console.log(event.key);\n    // this.snackBar.open('demo','',{\n    this.snackBar.openFromComponent(SnackhelperComponent,{\n      duration : 2000,\n    })\n  }\n\n  addEvent(type: string, event: MatDatepickerInputEvent<Date>) {\n    console.log(`${type}: ${event.value}`);\n    console.log(event.value.getTime());\n  }\n\n\n\n  //Prescription section coding starts from here\n\n  //Autocomplete test for multiple views\n  myControl = new FormControl();\n  myControl2 = new FormControl();\n  options: string[] = ['One', 'Two', 'Three'];\n  options2: string[] = ['One2', 'Two2', 'Three2'];\n  filteredOptions: Observable<string[]>;\n  filteredOptions2: Observable<string[]>;\n\n  startFilter1(){\n    this.filteredOptions = this.myControl.valueChanges.pipe(\n      startWith(''),\n      map(value => this._filter(value, this.options))\n    );\n  }\n  startFilter2(){\n    this.filteredOptions2 = this.myControl2.valueChanges.pipe(\n      startWith(''),\n      map(value2 => this._filter(value2, this.options2))\n    );\n  }\n  private _filter(value: string, customOptions : string[]): string[] {\n    console.log(`val : ${value} || array : ${customOptions}`);\n    const filterValue = value.toLowerCase();\n    return customOptions.filter(option => option.toLowerCase().indexOf(filterValue) === 0);\n  }\n}","export class Patient {\r\n    public bloodGroup: string;\r\n    public contactNo1: number;\r\n    public contactNo2: number;\r\n    public discountType: string;\r\n    public discount: number;\r\n    public dobDd: number;\r\n    public dobMm: number;\r\n    public dobYy: number;\r\n    public dobTimestamp: number;\r\n    public firstName: string;\r\n    public lastName: string;\r\n    // public tsCreated: number;\r\n    public weight: number;\r\n    // public image: string;\r\n    public email: string;\r\n    public address1: string;\r\n    public address2: string;\r\n    public pid: number;\r\n}\r\nexport interface BloodGroup {\r\n    value: string;\r\n    viewValue: string;\r\n}","export class Response{\r\n\r\n    public status : string;\r\n    public desc : string;\r\n    public resp : any;\r\n}","export class DummyResponse{\r\n    public getPatient = {\r\n        \"status\": \"SUCCESS\",\r\n        \"desc\": null,\r\n        \"resp\": [\r\n            {\r\n                \"bloodGroup\": \"B_POSITIVE\",\r\n                \"contactNo1\": 9046787913,\r\n                \"contactNo2\": 7980231838,\r\n                \"discountType\": \"flat\",\r\n                \"discount\": 20,\r\n                \"dobDd\": 27,\r\n                \"dobMm\": 3,\r\n                \"dobYy\": 1992,\r\n                \"firstName\": \"sourabh\",\r\n                \"lastName\": \"sadhu\",\r\n                \"tsCreated\": 1534695098485,\r\n                \"weight\": 80,\r\n                \"image\": null,\r\n                \"email\": \"sadhuait@gmail.com\",\r\n                \"address1\": \"Habra Jaigachi Rathtala North 24 Parganas\",\r\n                \"address2\": \"Trying to write a pretty looooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooong looooooooooooooooooooong text\",\r\n                \"pid\": 1\r\n            }\r\n        ]\r\n    };\r\n\r\n    public getTreatmentPlan = {\r\n        \"status\": \"SUCCESS\",\r\n        \"desc\": null,\r\n        \"resp\": [\r\n            {\r\n                \"trtId\": 1,\r\n                \"trtDesc\": \"Root canal treatment\",\r\n                \"trtName\": \"RCT\",\r\n                \"clinicalFinding\": 1\r\n            },\r\n            {\r\n                \"trtId\": 2,\r\n                \"trtDesc\": \"Root canal treatment\",\r\n                \"trtName\": \"RCT\",\r\n                \"clinicalFinding\": 4\r\n            },\r\n            {\r\n                \"trtId\": 9,\r\n                \"trtDesc\": \"Root canal treatment\",\r\n                \"trtName\": \"RCT\",\r\n                \"clinicalFinding\": 10\r\n            }\r\n        ]\r\n    };\r\n\r\n    public getMedicine = {\r\n        \"status\": \"SUCCESS\",\r\n        \"desc\": null,\r\n        \"resp\": [\r\n            {\r\n                \"medicineName\": \"med1\",\r\n                \"ageGroup\": \"10to30\",\r\n                \"treatmentId\": 1,\r\n                \"dosage\": \"sokale bikale 1 ta khabar por\",\r\n                \"clinicalAvailability\": 7,\r\n                \"diseaseCode\": \"dCode1\",\r\n                \"diseaseName\": \"dName1\",\r\n                \"ageGroupBean\": null,\r\n                \"treatmentPlan\": null\r\n            }\r\n        ]\r\n    };\r\n\r\n    public getMedicalMaster = {\r\n        \"status\": \"SUCCESS\",\r\n        \"desc\": null,\r\n        \"resp\": [\r\n            {\r\n                \"medicalHistoryName\": \"Hyperglycaemia\",\r\n                \"medicalHistories\": null\r\n            },\r\n            {\r\n                \"medicalHistoryName\": \"Hypertension\",\r\n                \"medicalHistories\": null\r\n            }\r\n        ]\r\n    };\r\n\r\n    getFeeConfig = {\r\n        \"status\": \"SUCCESS\",\r\n        \"desc\": null,\r\n        \"resp\": [\r\n            {\r\n                \"feeConfigId\": 18,\r\n                \"ageGroupId\": \"10to30\",\r\n                \"ageGroupPercent\": 10,\r\n                \"baseFee\": 60,\r\n                \"toothGroupId\": 2,\r\n                \"toothGroupPercent\": 10,\r\n                \"treatmentPlanId\": 1,\r\n                \"totalFee\": 72\r\n            }\r\n        ]\r\n    };\r\n\r\n    getAgeGroup = {\r\n        \"status\": \"SUCCESS\",\r\n        \"desc\": null,\r\n        \"resp\": {\r\n            \"groupId\": \"3to13\",\r\n            \"fromAge\": 3,\r\n            \"toAge\": 13\r\n        }\r\n    };\r\n\r\n    \r\n}","import { Injectable } from '@angular/core';\nimport { Observable, of } from 'rxjs';\nimport { map,tap, catchError } from 'rxjs/operators';\nimport { Response } from '../models/response';\nimport { DummyResponse } from './dummyresponse';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Patient } from '../models/patient';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class HttpcommService {\n\n  dummyResp : DummyResponse;\n  resp : Response;\n  ageGrpUrl = 'http://localhost:12000/my-portal/age-group/get-age-group?age=';\n  getPatientUrl = 'http://localhost:12000/my-portal/patient/get-patient';\n  addPatientUrl = 'http://localhost:12000/my-portal/patient/add-patient';\n  \n  constructor(public dummy : Boolean, public http : HttpClient) {\n    this.dummyResp = new DummyResponse();\n  }\n\n  httpOptions = {\n    headers: new HttpHeaders({ \n      'Accept' : 'application/json',\n      'Content-Type' : 'text/plain',\n      // 'Content-Type' : 'application/json',\n    })\n  };\n\n  parseData(s : object) : Response{\n    return JSON.parse(JSON.stringify(s));\n  }\n\n  getAgeGroup(age : string) : Observable<Response>{\n    if(this.dummy){      \n      return of(this.parseData(this.dummyResp.getPatient));\n    }else{\n      return this.http.get<Response>(this.ageGrpUrl+age, this.httpOptions);\n    }\n  }\n\n  getPatient(patient : Patient) : Observable<Response>{\n    console.log('http service called');\n    if(this.dummy){\n      console.log(this.parseData(this.dummyResp.getPatient));\n      return of(this.parseData(this.dummyResp.getPatient));\n    }else{\n      console.log(1.2);\n      return this.http.post<Response>(this.getPatientUrl,patient,this.httpOptions)\n        .pipe(\n          catchError(this.handleError('test', new Response()))\n        )\n      ;\n    }\n  }\n\n  addPatient(p : Patient, isDummy : boolean) : Observable<Response>{\n    console.log('Posting patient');\n    console.log(p);\n    if(this.dummy && isDummy){\n      console.log('Dummy post');\n      return of(this.parseData(this.dummyResp.getPatient));\n    }else{\n      console.log('Real post');\n      return this.http.post<Response>(this.addPatientUrl,p,this.httpOptions)\n        .pipe(\n          catchError(this.handleError('post patient', new Response()))\n        );\n    }\n  }\n\n\n  private handleError<T> (operation = 'operation', result?: T) {\n    return (error: any): Observable<T> => {\n   \n      // TODO: send the error to remote logging infrastructure\n      console.error(error); // log to console instead\n   \n      // TODO: better job of transforming error for user consumption\n      console.log(`${operation} failed: ${error.message}`);\n   \n      // Let the app keep running by returning an empty result.\n      return of(result as T);\n    };\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Patient } from '../models/patient';\nimport { Observable, of } from 'rxjs';\nimport { HttpClient } from '@angular/common/http';\nimport { HttpcommService } from './httpcomm.service';\nimport { SnackhelperComponent } from '../snackhelper/snackhelper.component';\nimport { MatSnackBar } from '@angular/material';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class PatientService {\n\n  patient : Patient;\n  com : HttpcommService;\n\n  constructor(httpClient : HttpClient, public snackbar : MatSnackBar) {    \n    console.log('Patient service constructor');\n    this.com = new HttpcommService(true, httpClient);\n    this.showError();\n  }\n\n   setPatient(patient : Patient){\n     this.patient = patient;\n   }\n\n   getRealPatient(patient : Patient) : Observable<Patient[]> {\n    console.log('Patient Service called');\n    let c : Patient[];\n    let response = this.com.getPatient(patient).subscribe(\n      resp =>{\n        if(resp.status === 'SUCCESS'){\n          c = resp.resp;\n        }else{          \n\n        }\n      }\n     );\n    return of(c);\n   }\n\n   addPatient(p : Patient) : Observable<Patient[]>{\n    console.log('Patient Service called');\n    console.log('Sending from patient service');\n    console.log(p);\n    let c : Patient[];\n    let response = this.com.addPatient(p, false).subscribe(\n      resp =>{\n        if(resp.status === 'SUCCESS'){\n          c = resp.resp;\n        }else{          \n\n        }\n      }\n     );\n    return of(c);\n   }\n\n   extractData(s : string) : string{\n      console.log(`Actual string ${s}`);\n      console.log(JSON.parse(JSON.stringify(s)));\n      return s;\n   }\n\n   showError(){\n     this.snackbar.openFromComponent(SnackhelperComponent,{\n       duration : 2000,\n     })\n   }\n\n}","module.exports = \".error-snack {\\r\\n    color: darkturquoise;\\r\\n}\"","module.exports = \"<span class=\\\"error-snack\\\">Oops! Something went wrong</span>\\n\"","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-snackhelper',\n  templateUrl: './snackhelper.component.html',\n  styleUrls: ['./snackhelper.component.css']\n})\nexport class SnackhelperComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build ---prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * In development mode, for easier debugging, you can ignore zone related error\n * stack frames such as `zone.run`/`zoneDelegate.invokeTask` by importing the\n * below file. Don't forget to comment it out in production mode\n * because it will have a performance impact when errors are thrown\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\nimport 'hammerjs';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.log(err));\n"],"sourceRoot":""}